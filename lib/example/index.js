import React, { useCallback, useRef } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Button } from 'react-native';
import InfiniteScroller from '../InfiniteScroller';
export default function App() {
  const scroller = useRef(null);
  const dataset = useCallback(async (start, length) => {
    const result = [];

    for (let i = 0; i < length; i++) {
      result.push({
        index: start + i
      });
    }

    return result;
  }, []);
  const renderItem = useCallback(item => {
    if (!item) {
      return <View style={{
        width: 50,
        height: 100
      }} />;
    }

    if (item.index < 0 || item.index > 20) {//return <View style={{width: 50, height: 100}}></View>;
    }

    const onPress = () => {
      if (!scroller.current) {
        return;
      }

      scroller.current.scrollToIndex(item.index, true);
    };

    return <TouchableOpacity onPress={onPress}>
				<View style={styles.item}>
					<Text>{item ? item.index : 'unknown'}</Text>
				</View>
			</TouchableOpacity>;
  }, []);
  const onScroll = useCallback(scroll => {
    console.log({
      scroll
    });
  }, []);
  const goNext = useCallback(() => {
    if (scroller.current) {
      scroller.current.goNext();
    }
  }, [scroller]);
  return <View style={{
    flex: 1
  }}>
			<View style={{
      flex: 1
    }}>
				<InfiniteScroller ref={scroller} dataset={dataset} onScrollEnd={onScroll} centerInWrapper={true} renderItem={renderItem} startingPosition={50} style={styles.scrollContainer} />
			</View>
			<View style={{
      marginBottom: 50
    }}>
				<Button onPress={goNext} title="Go Next" />
			</View>
		</View>;
}
const styles = StyleSheet.create({
  page: {
    flex: 1,
    marginBottom: 100
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
    marginTop: 100,
    height: 100
  },
  scrollContainer: {
    backgroundColor: '#123'
  },
  item: {
    width: 50,
    height: 100,
    borderWidth: 1,
    borderColor: 'red',
    backgroundColor: '#555',
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNhbGxiYWNrIiwidXNlUmVmIiwiU3R5bGVTaGVldCIsIlRleHQiLCJWaWV3IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkJ1dHRvbiIsIkluZmluaXRlU2Nyb2xsZXIiLCJBcHAiLCJzY3JvbGxlciIsImRhdGFzZXQiLCJzdGFydCIsImxlbmd0aCIsInJlc3VsdCIsImkiLCJwdXNoIiwiaW5kZXgiLCJyZW5kZXJJdGVtIiwiaXRlbSIsIndpZHRoIiwiaGVpZ2h0Iiwib25QcmVzcyIsImN1cnJlbnQiLCJzY3JvbGxUb0luZGV4Iiwic3R5bGVzIiwib25TY3JvbGwiLCJzY3JvbGwiLCJjb25zb2xlIiwibG9nIiwiZ29OZXh0IiwiZmxleCIsInNjcm9sbENvbnRhaW5lciIsIm1hcmdpbkJvdHRvbSIsImNyZWF0ZSIsInBhZ2UiLCJjb250YWluZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtYXJnaW5Ub3AiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLElBQWVDLFdBQWYsRUFBNEJDLE1BQTVCLFFBQXlDLE9BQXpDO0FBQ0EsU0FBUUMsVUFBUixFQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCLEVBQWdDQyxnQkFBaEMsRUFBa0RDLE1BQWxELFFBQStELGNBQS9EO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIscUJBQTdCO0FBTUEsZUFBZSxTQUFTQyxHQUFULEdBQWU7QUFDN0IsUUFBTUMsUUFBUSxHQUFHUixNQUFNLENBQW9DLElBQXBDLENBQXZCO0FBQ0EsUUFBTVMsT0FBTyxHQUFHVixXQUFXLENBQUMsT0FBT1csS0FBUCxFQUFzQkMsTUFBdEIsS0FBeUM7QUFDcEUsVUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEs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WSxFQUFFO0FBRlQsR0FEMEI7QUFLaENHLEVBQUFBLFNBQVMsRUFBRTtBQUNWTCxJQUFBQSxJQUFJLEVBQUUsQ0FESTtBQUVWTSxJQUFBQSxlQUFlLEVBQUUsTUFGUDtBQUdWQyxJQUFBQSxTQUFTLEVBQUUsR0FIRDtBQUlWakIsSUFBQUEsTUFBTSxFQUFFO0FBSkUsR0FMcUI7QUFXaENXLEVBQUFBLGVBQWUsRUFBRTtBQUNoQkssSUFBQUEsZUFBZSxFQUFFO0FBREQsR0FYZTtBQWNoQ2xCLEVBQUFBLElBQUksRUFBRTtBQUNMQyxJQUFBQSxLQUFLLEVBQUUsRUFERjtBQUVMQyxJQUFBQSxNQUFNLEVBQUUsR0FGSDtBQUdMa0IsSUFBQUEsV0FBVyxFQUFFLENBSFI7QUFJTEMsSUFBQUEsV0FBVyxFQUFFLEtBSlI7QUFLTEgsSUFBQUEsZUFBZSxFQUFFLE1BTFo7QUFNTEksSUFBQUEsVUFBVSxFQUFFLFFBTlA7QUFPTEMsSUFBQUEsY0FBYyxFQUFFO0FBUFg7QUFkMEIsQ0FBbEIsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VSZWZ9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7U3R5bGVTaGVldCwgVGV4dCwgVmlldywgVG91Y2hhYmxlT3BhY2l0eSwgQnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEluZmluaXRlU2Nyb2xsZXIgZnJvbSAnLi4vSW5maW5pdGVTY3JvbGxlcic7XG5cbmludGVyZmFjZSBJdGVtRGF0YSB7XG5cdGluZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpIHtcblx0Y29uc3Qgc2Nyb2xsZXIgPSB1c2VSZWY8SW5maW5pdGVTY3JvbGxlcjxJdGVtRGF0YT4gfCBudWxsPihudWxsKTtcblx0Y29uc3QgZGF0YXNldCA9IHVzZUNhbGxiYWNrKGFzeW5jIChzdGFydDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdHJlc3VsdC5wdXNoKHtpbmRleDogc3RhcnQgKyBpfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwgW10pO1xuXG5cdGNvbnN0IHJlbmRlckl0ZW0gPSB1c2VDYWxsYmFjaygoaXRlbTogSXRlbURhdGEgfCBudWxsKSA9PiB7XG5cdFx0aWYgKCFpdGVtKSB7XG5cdFx0XHRyZXR1cm4gPFZpZXcgc3R5bGU9e3t3aWR0aDogNTAsIGhlaWdodDogMTAwfX0gLz47XG5cdFx0fVxuXHRcdGlmIChpdGVtLmluZGV4IDwgMCB8fCBpdGVtLmluZGV4ID4gMjApIHtcblx0XHRcdC8vcmV0dXJuIDxWaWV3IHN0eWxlPXt7d2lkdGg6IDUwLCBoZWlnaHQ6IDEwMH19PjwvVmlldz47XG5cdFx0fVxuXHRcdGNvbnN0IG9uUHJlc3MgPSAoKSA9PiB7XG5cdFx0XHRpZiAoIXNjcm9sbGVyLmN1cnJlbnQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c2Nyb2xsZXIuY3VycmVudC5zY3JvbGxUb0luZGV4KGl0ZW0uaW5kZXgsIHRydWUpO1xuXHRcdH07XG5cdFx0cmV0dXJuIChcblx0XHRcdDxUb3VjaGFibGVPcGFjaXR5IG9uUHJlc3M9e29uUHJlc3N9PlxuXHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLml0ZW19PlxuXHRcdFx0XHRcdDxUZXh0PntpdGVtID8gaXRlbS5pbmRleCA6ICd1bmtub3duJ308L1RleHQ+XG5cdFx0XHRcdDwvVmlldz5cblx0XHRcdDwvVG91Y2hhYmxlT3BhY2l0eT5cblx0XHQpO1xuXHR9LCBbXSk7XG5cblx0Y29uc3Qgb25TY3JvbGwgPSB1c2VDYWxsYmFjaygoc2Nyb2xsOiBudW1iZXIpID0+IHtcblx0XHRjb25zb2xlLmxvZyh7c2Nyb2xsfSk7XG5cdH0sIFtdKTtcblxuXHRjb25zdCBnb05leHQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG5cdFx0aWYgKHNjcm9sbGVyLmN1cnJlbnQpIHtcblx0XHRcdHNjcm9sbGVyLmN1cnJlbnQuZ29OZXh0KCk7XG5cdFx0fVxuXHR9LCBbc2Nyb2xsZXJdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxWaWV3IHN0eWxlPXt7ZmxleDogMX19PlxuXHRcdFx0PFZpZXcgc3R5bGU9e3tmbGV4OiAxfX0+XG5cdFx0XHRcdDxJbmZpbml0ZVNjcm9sbGVyPEl0ZW1EYXRhPlxuXHRcdFx0XHRcdHJlZj17c2Nyb2xsZXJ9XG5cdFx0XHRcdFx0ZGF0YXNldD17ZGF0YXNldH1cblx0XHRcdFx0XHRvblNjcm9sbEVuZD17b25TY3JvbGx9XG5cdFx0XHRcdFx0Y2VudGVySW5XcmFwcGVyPXt0cnVlfVxuXHRcdFx0XHRcdHJlbmRlckl0ZW09e3JlbmRlckl0ZW19XG5cdFx0XHRcdFx0c3RhcnRpbmdQb3NpdGlvbj17NTB9XG5cdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy5zY3JvbGxDb250YWluZXJ9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L1ZpZXc+XG5cdFx0XHQ8VmlldyBzdHlsZT17e21hcmdpbkJvdHRvbTogNTB9fT5cblx0XHRcdFx0PEJ1dHRvbiBvblByZXNzPXtnb05leHR9IHRpdGxlPVwiR28gTmV4dFwiIC8+XG5cdFx0XHQ8L1ZpZXc+XG5cdFx0PC9WaWV3PlxuXHQpO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG5cdHBhZ2U6IHtcblx0XHRmbGV4OiAxLFxuXHRcdG1hcmdpbkJvdHRvbTogMTAwLFxuXHR9LFxuXHRjb250YWluZXI6IHtcblx0XHRmbGV4OiAxLFxuXHRcdGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuXHRcdG1hcmdpblRvcDogMTAwLFxuXHRcdGhlaWdodDogMTAwLFxuXHR9LFxuXHRzY3JvbGxDb250YWluZXI6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICcjMTIzJyxcblx0fSxcblx0aXRlbToge1xuXHRcdHdpZHRoOiA1MCxcblx0XHRoZWlnaHQ6IDEwMCxcblx0XHRib3JkZXJXaWR0aDogMSxcblx0XHRib3JkZXJDb2xvcjogJ3JlZCcsXG5cdFx0YmFja2dyb3VuZENvbG9yOiAnIzU1NScsXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuXHR9LFxufSk7XG4iXX0=