import React, { useCallback, useRef } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Button } from 'react-native';
import InfiniteScroller from '../InfiniteScroller';
export default function App() {
  const scroller = useRef(null);
  const dataset = useCallback(async (start, length) => {
    const result = [];

    for (let i = 0; i < length; i++) {
      result.push({
        index: start + i
      });
    }

    return result;
  }, []);
  const renderItem = useCallback(item => {
    if (!item) {
      return <View style={{
        width: 50,
        height: 100
      }} />;
    }

    if (item.index < 0 || item.index > 20) {//return <View style={{width: 50, height: 100}}></View>;
    }

    const onPress = () => {
      if (!scroller.current) {
        return;
      }

      scroller.current.scrollToIndex(item.index, true);
    };

    return <TouchableOpacity onPress={onPress}>
				<View style={styles.item}>
					<Text>{item ? item.index : 'unknown'}</Text>
				</View>
			</TouchableOpacity>;
  }, []);
  const onScroll = useCallback(scroll => {
    console.log({
      scroll
    });
  }, []);
  const goNext = useCallback(() => {
    if (scroller.current) {
      scroller.current.goNext();
    }
  }, [scroller]);
  return <View style={{
    flex: 1
  }}>
			<View style={{
      flex: 1
    }}>
				<InfiniteScroller ref={scroller} dataset={dataset} onScrollEnd={onScroll} centerInWrapper={true} renderItem={renderItem} startingPosition={50} style={styles.scrollContainer} />
			</View>
			<View style={{
      marginBottom: 50
    }}>
				<Button onPress={goNext} title="Go Next" />
			</View>
		</View>;
}
const styles = StyleSheet.create({
  page: {
    flex: 1,
    marginBottom: 100
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
    marginTop: 100,
    height: 100
  },
  scrollContainer: {
    backgroundColor: '#123'
  },
  item: {
    width: 50,
    height: 100,
    borderWidth: 1,
    borderColor: 'red',
    backgroundColor: '#555',
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNhbGxiYWNrIiwidXNlUmVmIiwiU3R5bGVTaGVldCIsIlRleHQiLCJWaWV3IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkJ1dHRvbiIsIkluZmluaXRlU2Nyb2xsZXIiLCJBcHAiLCJzY3JvbGxlciIsImRhdGFzZXQiLCJzdGFydCIsImxlbmd0aCIsInJlc3VsdCIsImkiLCJwdXNoIiwiaW5kZXgiLCJyZW5kZXJJdGVtIiwiaXRlbSIsIndpZHRoIiwiaGVpZ2h0Iiwib25QcmVzcyIsImN1cnJlbnQiLCJzY3JvbGxUb0luZGV4Iiwic3R5bGVzIiwib25TY3JvbGwiLCJzY3JvbGwiLCJjb25zb2xlIiwibG9nIiwiZ29OZXh0IiwiZmxleCIsInNjcm9sbENvbnRhaW5lciIsIm1hcmdpbkJvdHRvbSIsImNyZWF0ZSIsInBhZ2UiLCJjb250YWluZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtYXJnaW5Ub3AiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLElBQWVDLFdBQWYsRUFBNEJDLE1BQTVCLFFBQXlDLE9BQXpDO0FBQ0EsU0FBUUMsVUFBUixFQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCLEVBQWdDQyxnQkFBaEMsRUFBa0RDLE1BQWxELFFBQStELGNBQS9EO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIscUJBQTdCO0FBTUEsZUFBZSxTQUFTQyxHQUFULEdBQWU7QUFDN0IsUUFBTUMsUUFBUSxHQUFHUixNQUFNLENBQW9DLElBQXBDLENBQXZCO0FBQ0EsUUFBTVMsT0FBTyxHQUFHVixXQUFXLENBQUMsT0FBT1csS0FBUCxFQUFzQkMsTUFBdEIsS0FBeUM7QUFDcEUsVUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEs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QUEsSUFBSSxFQUFFO0FBQ0xKLElBQUFBLElBQUksRUFBRSxDQUREO0FBRUxFLElBQUFBLFlBQVksRUFBRTtBQUZULEdBRDBCO0FBS2hDRyxFQUFBQSxTQUFTLEVBQUU7QUFDVkwsSUFBQUEsSUFBSSxFQUFFLENBREk7QUFFVk0sSUFBQUEsZUFBZSxFQUFFLE1BRlA7QUFHVkMsSUFBQUEsU0FBUyxFQUFFLEdBSEQ7QUFJVmpCLElBQUFBLE1BQU0sRUFBRTtBQUpFLEdBTHFCO0FBV2hDVyxFQUFBQSxlQUFlLEVBQUU7QUFDaEJLLElBQUFBLGVBQWUsRUFBRTtBQURELEdBWGU7QUFjaENsQixFQUFBQSxJQUFJLEVBQUU7QUFDTEMsSUFBQUEsS0FBSyxFQUFFLEVBREY7QUFFTEMsSUFBQUEsTUFBTSxFQUFFLEdBRkg7QUFHTGtCLElBQUFBLFdBQVcsRUFBRSxDQUhSO0FBSUxDLElBQUFBLFdBQVcsRUFBRSxLQUpSO0FBS0xILElBQUFBLGVBQWUsRUFBRSxNQUxaO0FBTUxJLElBQUFBLFVBQVUsRUFBRSxRQU5QO0FBT0xDLElBQUFBLGNBQWMsRUFBRTtBQVBYO0FBZDBCLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1N0eWxlU2hlZXQsIFRleHQsIFZpZXcsIFRvdWNoYWJsZU9wYWNpdHksIEJ1dHRvbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBJbmZpbml0ZVNjcm9sbGVyIGZyb20gJy4uL0luZmluaXRlU2Nyb2xsZXInO1xuXG5pbnRlcmZhY2UgSXRlbURhdGEge1xuXHRpbmRleDogbnVtYmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XG5cdGNvbnN0IHNjcm9sbGVyID0gdXNlUmVmPEluZmluaXRlU2Nyb2xsZXI8SXRlbURhdGE+IHwgbnVsbD4obnVsbCk7XG5cdGNvbnN0IGRhdGFzZXQgPSB1c2VDYWxsYmFjayhhc3luYyAoc3RhcnQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpID0+IHtcblx0XHRjb25zdCByZXN1bHQgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRyZXN1bHQucHVzaCh7aW5kZXg6IHN0YXJ0ICsgaX0pO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIFtdKTtcblxuXHRjb25zdCByZW5kZXJJdGVtID0gdXNlQ2FsbGJhY2soKGl0ZW06IEl0ZW1EYXRhIHwgbnVsbCkgPT4ge1xuXHRcdGlmICghaXRlbSkge1xuXHRcdFx0cmV0dXJuIDxWaWV3IHN0eWxlPXt7d2lkdGg6IDUwLCBoZWlnaHQ6IDEwMH19IC8+O1xuXHRcdH1cblx0XHRpZiAoaXRlbS5pbmRleCA8IDAgfHwgaXRlbS5pbmRleCA+IDIwKSB7XG5cdFx0XHQvL3JldHVybiA8VmlldyBzdHlsZT17e3dpZHRoOiA1MCwgaGVpZ2h0OiAxMDB9fT48L1ZpZXc+O1xuXHRcdH1cblx0XHRjb25zdCBvblByZXNzID0gKCkgPT4ge1xuXHRcdFx0aWYgKCFzY3JvbGxlci5jdXJyZW50KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHNjcm9sbGVyLmN1cnJlbnQuc2Nyb2xsVG9JbmRleChpdGVtLmluZGV4LCB0cnVlKTtcblx0XHR9O1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXtvblByZXNzfT5cblx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5pdGVtfT5cblx0XHRcdFx0XHQ8VGV4dD57aXRlbSA/IGl0ZW0uaW5kZXggOiAndW5rbm93bid9PC9UZXh0PlxuXHRcdFx0XHQ8L1ZpZXc+XG5cdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XG5cdFx0KTtcblx0fSwgW10pO1xuXG5cdGNvbnN0IG9uU2Nyb2xsID0gdXNlQ2FsbGJhY2soKHNjcm9sbDogbnVtYmVyKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coe3Njcm9sbH0pO1xuXHR9LCBbXSk7XG5cblx0Y29uc3QgZ29OZXh0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuXHRcdGlmIChzY3JvbGxlci5jdXJyZW50KSB7XG5cdFx0XHRzY3JvbGxlci5jdXJyZW50LmdvTmV4dCgpO1xuXHRcdH1cblx0fSwgW3Njcm9sbGVyXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8VmlldyBzdHlsZT17e2ZsZXg6IDF9fT5cblx0XHRcdDxWaWV3IHN0eWxlPXt7ZmxleDogMX19PlxuXHRcdFx0XHQ8SW5maW5pdGVTY3JvbGxlcjxJdGVtRGF0YT5cblx0XHRcdFx0XHRyZWY9e3Njcm9sbGVyfVxuXHRcdFx0XHRcdGRhdGFzZXQ9e2RhdGFzZXR9XG5cdFx0XHRcdFx0b25TY3JvbGxFbmQ9e29uU2Nyb2xsfVxuXHRcdFx0XHRcdGNlbnRlckluV3JhcHBlcj17dHJ1ZX1cblx0XHRcdFx0XHRyZW5kZXJJdGVtPXtyZW5kZXJJdGVtfVxuXHRcdFx0XHRcdHN0YXJ0aW5nUG9zaXRpb249ezUwfVxuXHRcdFx0XHRcdHN0eWxlPXtzdHlsZXMuc2Nyb2xsQ29udGFpbmVyfVxuXHRcdFx0XHQvPlxuXHRcdFx0PC9WaWV3PlxuXHRcdFx0PFZpZXcgc3R5bGU9e3ttYXJnaW5Cb3R0b206IDUwfX0+XG5cdFx0XHRcdDxCdXR0b24gb25QcmVzcz17Z29OZXh0fSB0aXRsZT1cIkdvIE5leHRcIiAvPlxuXHRcdFx0PC9WaWV3PlxuXHRcdDwvVmlldz5cblx0KTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuXHRwYWdlOiB7XG5cdFx0ZmxleDogMSxcblx0XHRtYXJnaW5Cb3R0b206IDEwMCxcblx0fSxcblx0Y29udGFpbmVyOiB7XG5cdFx0ZmxleDogMSxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcblx0XHRtYXJnaW5Ub3A6IDEwMCxcblx0XHRoZWlnaHQ6IDEwMCxcblx0fSxcblx0c2Nyb2xsQ29udGFpbmVyOiB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiAnIzEyMycsXG5cdH0sXG5cdGl0ZW06IHtcblx0XHR3aWR0aDogNTAsXG5cdFx0aGVpZ2h0OiAxMDAsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0Ym9yZGVyQ29sb3I6ICdyZWQnLFxuXHRcdGJhY2tncm91bmRDb2xvcjogJyM1NTUnLFxuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxuXHRcdGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcblx0fSxcbn0pO1xuIl19