import React, { useCallback, useRef } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Button } from 'react-native';
import InfiniteScroller from '../InfiniteScroller';
export default function App() {
  const scroller = useRef(null);
  const dataset = useCallback(async (start, length) => {
    const result = [];

    for (let i = 0; i < length; i++) {
      result.push({
        index: start + i
      });
    }

    return result;
  }, []);
  const renderItem = useCallback(item => {
    if (!item) {
      return <View style={{
        width: 50,
        height: 100
      }} />;
    }

    if (item.index < 0 || item.index > 20) {//return <View style={{width: 50, height: 100}}></View>;
    }

    const onPress = () => {
      if (!scroller.current) {
        return;
      }

      scroller.current.scrollTo(item.index, true);
    };

    return <TouchableOpacity onPress={onPress}>
				<View style={styles.item}>
					<Text>{item ? item.index : 'unknown'}</Text>
				</View>
			</TouchableOpacity>;
  }, []);
  const onScroll = useCallback(scroll => {
    console.log({
      scroll
    });
  }, []);
  const goNext = useCallback(() => {
    if (scroller.current) {
      scroller.current.goNext();
    }
  }, [scroller]);
  return <View style={{
    flex: 1
  }}>
			<View style={{
      flex: 1
    }}>
				<InfiniteScroller ref={scroller} dataset={dataset} onScrollEnd={onScroll} centerInWrapper={true} renderItem={renderItem} startingPosition={50} style={styles.scrollContainer} />
			</View>
			<View style={{
      marginBottom: 50
    }}>
				<Button onPress={goNext} title="Go Next" />
			</View>
		</View>;
}
const styles = StyleSheet.create({
  page: {
    flex: 1,
    marginBottom: 100
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
    marginTop: 100,
    height: 100
  },
  scrollContainer: {
    backgroundColor: '#123'
  },
  item: {
    width: 50,
    height: 100,
    borderWidth: 1,
    borderColor: 'red',
    backgroundColor: '#555',
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNhbGxiYWNrIiwidXNlUmVmIiwiU3R5bGVTaGVldCIsIlRleHQiLCJWaWV3IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkJ1dHRvbiIsIkluZmluaXRlU2Nyb2xsZXIiLCJBcHAiLCJzY3JvbGxlciIsImRhdGFzZXQiLCJzdGFydCIsImxlbmd0aCIsInJlc3VsdCIsImkiLCJwdXNoIiwiaW5kZXgiLCJyZW5kZXJJdGVtIiwiaXRlbSIsIndpZHRoIiwiaGVpZ2h0Iiwib25QcmVzcyIsImN1cnJlbnQiLCJzY3JvbGxUbyIsInN0eWxlcyIsIm9uU2Nyb2xsIiwic2Nyb2xsIiwiY29uc29sZSIsImxvZyIsImdvTmV4dCIsImZsZXgiLCJzY3JvbGxDb250YWluZXIiLCJtYXJnaW5Cb3R0b20iLCJjcmVhdGUiLCJwYWdlIiwiY29udGFpbmVyIiwiYmFja2dyb3VuZENvbG9yIiwibWFyZ2luVG9wIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxJQUFlQyxXQUFmLEVBQTRCQyxNQUE1QixRQUF5QyxPQUF6QztBQUNBLFNBQVFDLFVBQVIsRUFBb0JDLElBQXBCLEVBQTBCQyxJQUExQixFQUFnQ0MsZ0JBQWhDLEVBQWtEQyxNQUFsRCxRQUErRCxjQUEvRDtBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLHFCQUE3QjtBQU1BLGVBQWUsU0FBU0MsR0FBVCxHQUFlO0FBQzdCLFFBQU1DLFFBQVEsR0FBR1IsTUFBTSxDQUFvQyxJQUFwQyxDQUF2QjtBQUNBLFFBQU1TLE9BQU8sR0FBR1YsV0FBVyxDQUFDLE9BQU9XLEtBQVAsRUFBc0JDLE1BQXRCLEtBQXlDO0FBQ3BFLFVBQU1DLE1BQU0sR0FBRyxFQUFmOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMs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RTtBQUZULEdBRDBCO0FBS2hDRyxFQUFBQSxTQUFTLEVBQUU7QUFDVkwsSUFBQUEsSUFBSSxFQUFFLENBREk7QUFFVk0sSUFBQUEsZUFBZSxFQUFFLE1BRlA7QUFHVkMsSUFBQUEsU0FBUyxFQUFFLEdBSEQ7QUFJVmpCLElBQUFBLE1BQU0sRUFBRTtBQUpFLEdBTHFCO0FBV2hDVyxFQUFBQSxlQUFlLEVBQUU7QUFDaEJLLElBQUFBLGVBQWUsRUFBRTtBQURELEdBWGU7QUFjaENsQixFQUFBQSxJQUFJLEVBQUU7QUFDTEMsSUFBQUEsS0FBSyxFQUFFLEVBREY7QUFFTEMsSUFBQUEsTUFBTSxFQUFFLEdBRkg7QUFHTGtCLElBQUFBLFdBQVcsRUFBRSxDQUhSO0FBSUxDLElBQUFBLFdBQVcsRUFBRSxLQUpSO0FBS0xILElBQUFBLGVBQWUsRUFBRSxNQUxaO0FBTUxJLElBQUFBLFVBQVUsRUFBRSxRQU5QO0FBT0xDLElBQUFBLGNBQWMsRUFBRTtBQVBYO0FBZDBCLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1N0eWxlU2hlZXQsIFRleHQsIFZpZXcsIFRvdWNoYWJsZU9wYWNpdHksIEJ1dHRvbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBJbmZpbml0ZVNjcm9sbGVyIGZyb20gJy4uL0luZmluaXRlU2Nyb2xsZXInO1xuXG5pbnRlcmZhY2UgSXRlbURhdGEge1xuXHRpbmRleDogbnVtYmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XG5cdGNvbnN0IHNjcm9sbGVyID0gdXNlUmVmPEluZmluaXRlU2Nyb2xsZXI8SXRlbURhdGE+IHwgbnVsbD4obnVsbCk7XG5cdGNvbnN0IGRhdGFzZXQgPSB1c2VDYWxsYmFjayhhc3luYyAoc3RhcnQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpID0+IHtcblx0XHRjb25zdCByZXN1bHQgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRyZXN1bHQucHVzaCh7aW5kZXg6IHN0YXJ0ICsgaX0pO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIFtdKTtcblxuXHRjb25zdCByZW5kZXJJdGVtID0gdXNlQ2FsbGJhY2soKGl0ZW06IEl0ZW1EYXRhIHwgbnVsbCkgPT4ge1xuXHRcdGlmICghaXRlbSkge1xuXHRcdFx0cmV0dXJuIDxWaWV3IHN0eWxlPXt7d2lkdGg6IDUwLCBoZWlnaHQ6IDEwMH19IC8+O1xuXHRcdH1cblx0XHRpZiAoaXRlbS5pbmRleCA8IDAgfHwgaXRlbS5pbmRleCA+IDIwKSB7XG5cdFx0XHQvL3JldHVybiA8VmlldyBzdHlsZT17e3dpZHRoOiA1MCwgaGVpZ2h0OiAxMDB9fT48L1ZpZXc+O1xuXHRcdH1cblx0XHRjb25zdCBvblByZXNzID0gKCkgPT4ge1xuXHRcdFx0aWYgKCFzY3JvbGxlci5jdXJyZW50KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHNjcm9sbGVyLmN1cnJlbnQuc2Nyb2xsVG8oaXRlbS5pbmRleCwgdHJ1ZSk7XG5cdFx0fTtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PFRvdWNoYWJsZU9wYWNpdHkgb25QcmVzcz17b25QcmVzc30+XG5cdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuaXRlbX0+XG5cdFx0XHRcdFx0PFRleHQ+e2l0ZW0gPyBpdGVtLmluZGV4IDogJ3Vua25vd24nfTwvVGV4dD5cblx0XHRcdFx0PC9WaWV3PlxuXHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxuXHRcdCk7XG5cdH0sIFtdKTtcblxuXHRjb25zdCBvblNjcm9sbCA9IHVzZUNhbGxiYWNrKChzY3JvbGw6IG51bWJlcikgPT4ge1xuXHRcdGNvbnNvbGUubG9nKHtzY3JvbGx9KTtcblx0fSwgW10pO1xuXG5cdGNvbnN0IGdvTmV4dCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcblx0XHRpZiAoc2Nyb2xsZXIuY3VycmVudCkge1xuXHRcdFx0c2Nyb2xsZXIuY3VycmVudC5nb05leHQoKTtcblx0XHR9XG5cdH0sIFtzY3JvbGxlcl0pO1xuXG5cdHJldHVybiAoXG5cdFx0PFZpZXcgc3R5bGU9e3tmbGV4OiAxfX0+XG5cdFx0XHQ8VmlldyBzdHlsZT17e2ZsZXg6IDF9fT5cblx0XHRcdFx0PEluZmluaXRlU2Nyb2xsZXI8SXRlbURhdGE+XG5cdFx0XHRcdFx0cmVmPXtzY3JvbGxlcn1cblx0XHRcdFx0XHRkYXRhc2V0PXtkYXRhc2V0fVxuXHRcdFx0XHRcdG9uU2Nyb2xsRW5kPXtvblNjcm9sbH1cblx0XHRcdFx0XHRjZW50ZXJJbldyYXBwZXI9e3RydWV9XG5cdFx0XHRcdFx0cmVuZGVySXRlbT17cmVuZGVySXRlbX1cblx0XHRcdFx0XHRzdGFydGluZ1Bvc2l0aW9uPXs1MH1cblx0XHRcdFx0XHRzdHlsZT17c3R5bGVzLnNjcm9sbENvbnRhaW5lcn1cblx0XHRcdFx0Lz5cblx0XHRcdDwvVmlldz5cblx0XHRcdDxWaWV3IHN0eWxlPXt7bWFyZ2luQm90dG9tOiA1MH19PlxuXHRcdFx0XHQ8QnV0dG9uIG9uUHJlc3M9e2dvTmV4dH0gdGl0bGU9XCJHbyBOZXh0XCIgLz5cblx0XHRcdDwvVmlldz5cblx0XHQ8L1ZpZXc+XG5cdCk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcblx0cGFnZToge1xuXHRcdGZsZXg6IDEsXG5cdFx0bWFyZ2luQm90dG9tOiAxMDAsXG5cdH0sXG5cdGNvbnRhaW5lcjoge1xuXHRcdGZsZXg6IDEsXG5cdFx0YmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG5cdFx0bWFyZ2luVG9wOiAxMDAsXG5cdFx0aGVpZ2h0OiAxMDAsXG5cdH0sXG5cdHNjcm9sbENvbnRhaW5lcjoge1xuXHRcdGJhY2tncm91bmRDb2xvcjogJyMxMjMnLFxuXHR9LFxuXHRpdGVtOiB7XG5cdFx0d2lkdGg6IDUwLFxuXHRcdGhlaWdodDogMTAwLFxuXHRcdGJvcmRlcldpZHRoOiAxLFxuXHRcdGJvcmRlckNvbG9yOiAncmVkJyxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICcjNTU1Jyxcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG5cdH0sXG59KTtcbiJdfQ==