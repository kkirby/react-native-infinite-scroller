function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Animated from 'react-native-reanimated';
const {
  stopClock,
  defined,
  clockRunning,
  startClock,
  decay,
  debug,
  round,
  spring,
  SpringUtils
} = Animated;
export const springHelper = (value, toValue, velocity) => {
  const clock = new Animated.Clock();
  const state = {
    finished: new Animated.Value(0),
    velocity: new Animated.Value(0),
    position: value,
    time: new Animated.Value(0),
    running: new Animated.Value(0)
  };

  const config = _objectSpread({}, SpringUtils.makeDefaultConfig(), {
    restDisplacementThreshold: 1,
    restSpeedThreshold: 1,
    toValue
  });

  const tick = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 0), [Animated.set(state.running, 1), Animated.set(state.finished, 0), Animated.set(state.time, 0), Animated.set(state.velocity, velocity), startClock(clock)]), spring(clock, state, config), Animated.cond(Animated.eq(state.finished, 1), [Animated.set(state.running, 0), stopClock(clock)]), value]);
  const stop = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 1), [stopClock(clock), Animated.set(state.finished, 1), Animated.set(state.running, 0)])]);
  return _objectSpread({
    tick,
    stop
  }, state);
};
export const decayHelper = (value, velocity, deceleration) => {
  const clock = new Animated.Clock();
  const state = {
    finished: new Animated.Value(0),
    velocity: new Animated.Value(0),
    position: value,
    time: new Animated.Value(0),
    running: new Animated.Value(0)
  };
  const tick = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 0), [Animated.set(state.running, 1), Animated.set(state.finished, 0), Animated.set(state.time, 0), Animated.set(state.velocity, velocity), startClock(clock)]), decay(clock, state, {
    deceleration
  }), Animated.cond(Animated.eq(state.finished, 1), [Animated.set(state.running, 0), stopClock(clock)]), value]);
  const stop = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 1), [stopClock(clock), Animated.set(state.finished, 1), Animated.set(state.running, 0)])]);
  return _objectSpread({
    tick,
    stop
  }, state);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BbmltYXRpb25Mb2dpYy9SZWFuaW1hdGVkSGVscGVycy5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZCIsInN0b3BDbG9jayIsImRlZmluZWQiLCJjbG9ja1J1bm5pbmciLCJzdGFydENsb2NrIiwiZGVjYXkiLCJkZWJ1ZyIsInJvdW5kIiwic3ByaW5nIiwiU3ByaW5nVXRpbHMiLCJzcHJpbmdIZWxwZXIiLCJ2YWx1ZSIsInRvVmFsdWUiLCJ2ZWxvY2l0eSIsImNsb2NrIiwiQ2xvY2siLCJzdGF0ZSIsImZpbmlzaGVkIiwiVmFsdWUiLCJwb3NpdGlvbiIsInRpbWUiLCJydW5uaW5nIiwiY29uZmlnIiwibWFrZURlZmF1bHRDb25maWciLCJyZXN0RGlzcGxhY2VtZW50VGhyZXNob2xkIiwicmVzdFNwZWVkVGhyZXNob2xkIiwidGljayIsInN0b3AiLCJkZWNheUhlbHBlciIsImRlY2VsZXJhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBT0EsUUFBUCxNQUFxQix5QkFBckI7QUFFQSxNQUFNO0FBQ0xDLEVBQUFBLFNBREs7QUFFTEMsRUFBQUEsT0FGSztBQUdMQyxFQUFBQSxZQUhLO0FBSUxDLEVBQUFBLFVBSks7QUFLTEMsRUFBQUEsS0FMSztBQU1MQyxFQUFBQSxLQU5LO0FBT0xDLEVBQUFBLEtBUEs7QUFRTEMsRUFBQUEsTUFSSztBQVNMQyxFQUFBQTtBQVRLLElBVUZULFFBVko7QUFZQSxPQUFPLE1BQU1VLFlBQVksR0FBRyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUJDLFFBQWpCLEtBQThCO0FBQ3pELFFBQU1DLEtBQUssR0FBRyxJQUFJZCxRQUFRLENBQUNlLEtBQWIsRUFBZDtBQUNBLFFBQU1DLEtBQUssR0FBRztBQUNiQyxJQUFBQSxRQUFRLEVBQUUsSUFBSWpCLFFBQVEsQ0FBQ2tCLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FERztBQUViTCxJQUFBQSxRQUFRLEVBQUUsSUFBSWIsUUFBUSxDQUFDa0IsS0FBYixDQUFtQixD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RSxLQUFLLENBQUNDLFFBSEUsRUFHUyxDQUhULGdCQUlSRCxLQUFLLENBQUNLLE9BSkUsRUFJUSxDQUpSLEtBQVY7QUFRQTtBQUFRSyxJQUFBQSxJQUFSO0FBQWNDLElBQUFBO0FBQWQsS0FBdUJYLEtBQXZCO0FBQ0EsQ0FyQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmUgZnJvbSAnQGtraXJiYXRza2kvanMtdG8tcmVhbmltYXRlZC5tYWNybyc7XG5pbXBvcnQgQW5pbWF0ZWQgZnJvbSAncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnO1xuXG5jb25zdCB7XG5cdHN0b3BDbG9jayxcblx0ZGVmaW5lZCxcblx0Y2xvY2tSdW5uaW5nLFxuXHRzdGFydENsb2NrLFxuXHRkZWNheSxcblx0ZGVidWcsXG5cdHJvdW5kLFxuXHRzcHJpbmcsXG5cdFNwcmluZ1V0aWxzLFxufSA9IEFuaW1hdGVkO1xuXG5leHBvcnQgY29uc3Qgc3ByaW5nSGVscGVyID0gKHZhbHVlLCB0b1ZhbHVlLCB2ZWxvY2l0eSkgPT4ge1xuXHRjb25zdCBjbG9jayA9IG5ldyBBbmltYXRlZC5DbG9jaygpO1xuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRmaW5pc2hlZDogbmV3IEFuaW1hdGVkLlZhbHVlKDApLFxuXHRcdHZlbG9jaXR5OiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdFx0cG9zaXRpb246IHZhbHVlLFxuXHRcdHRpbWU6IG5ldyBBbmltYXRlZC5WYWx1ZSgwKSxcblx0XHRydW5uaW5nOiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdH07XG5cblx0Y29uc3QgY29uZmlnID0ge1xuXHRcdC4uLlNwcmluZ1V0aWxzLm1ha2VEZWZhdWx0Q29uZmlnKCksXG5cdFx0cmVzdERpc3BsYWNlbWVudFRocmVzaG9sZDogMSxcblx0XHRyZXN0U3BlZWRUaHJlc2hvbGQ6IDEsXG5cdFx0dG9WYWx1ZSxcblx0fTtcblxuXHRjb25zdCB0aWNrID0gcmUoKCkgPT4ge1xuXHRcdGlmIChjbG9ja1J1bm5pbmcoY2xvY2spID09PSAwKSB7XG5cdFx0XHRzdGF0ZS5ydW5uaW5nID0gMTtcblx0XHRcdHN0YXRlLmZpbmlzaGVkID0gMDtcblx0XHRcdHN0YXRlLnRpbWUgPSAwO1xuXHRcdFx0c3RhdGUudmVsb2NpdHkgPSB2ZWxvY2l0eTtcblx0XHRcdHN0YXJ0Q2xvY2soY2xvY2spO1xuXHRcdH1cblx0XHRzcHJpbmcoY2xvY2ssIHN0YXRlLCBjb25maWcpO1xuXG5cdFx0aWYgKHN0YXRlLmZpbmlzaGVkID09PSAxKSB7XG5cdFx0XHRzdGF0ZS5ydW5uaW5nID0gMDtcblx0XHRcdHN0b3BDbG9jayhjbG9jayk7XG5cdFx0fVxuXHRcdHZhbHVlO1xuXHR9KTtcblxuXHRjb25zdCBzdG9wID0gcmUoKCkgPT4ge1xuXHRcdGlmIChjbG9ja1J1bm5pbmcoY2xvY2spID09PSAxKSB7XG5cdFx0XHRzdG9wQ2xvY2soY2xvY2spO1xuXHRcdFx0c3RhdGUuZmluaXNoZWQgPSAxO1xuXHRcdFx0c3RhdGUucnVubmluZyA9IDA7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4ge3RpY2ssIHN0b3AsIC4uLnN0YXRlfTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWNheUhlbHBlciA9ICh2YWx1ZSwgdmVsb2NpdHksIGRlY2VsZXJhdGlvbikgPT4ge1xuXHRjb25zdCBjbG9jayA9IG5ldyBBbmltYXRlZC5DbG9jaygpO1xuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRmaW5pc2hlZDogbmV3IEFuaW1hdGVkLlZhbHVlKDApLFxuXHRcdHZlbG9jaXR5OiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdFx0cG9zaXRpb246IHZhbHVlLFxuXHRcdHRpbWU6IG5ldyBBbmltYXRlZC5WYWx1ZSgwKSxcblx0XHRydW5uaW5nOiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdH07XG5cblx0Y29uc3QgdGljayA9IHJlKCgpID0+IHtcblx0XHRpZiAoY2xvY2tSdW5uaW5nKGNsb2NrKSA9PT0gMCkge1xuXHRcdFx0c3RhdGUucnVubmluZyA9IDE7XG5cdFx0XHRzdGF0ZS5maW5pc2hlZCA9IDA7XG5cdFx0XHRzdGF0ZS50aW1lID0gMDtcblx0XHRcdHN0YXRlLnZlbG9jaXR5ID0gdmVsb2NpdHk7XG5cdFx0XHRzdGFydENsb2NrKGNsb2NrKTtcblx0XHR9XG5cdFx0ZGVjYXkoY2xvY2ssIHN0YXRlLCB7XG5cdFx0XHRkZWNlbGVyYXRpb24sXG5cdFx0fSk7XG5cdFx0aWYgKHN0YXRlLmZpbmlzaGVkID09PSAxKSB7XG5cdFx0XHRzdGF0ZS5ydW5uaW5nID0gMDtcblx0XHRcdHN0b3BDbG9jayhjbG9jayk7XG5cdFx0fVxuXHRcdHZhbHVlO1xuXHR9KTtcblxuXHRjb25zdCBzdG9wID0gcmUoKCkgPT4ge1xuXHRcdGlmIChjbG9ja1J1bm5pbmcoY2xvY2spID09PSAxKSB7XG5cdFx0XHRzdG9wQ2xvY2soY2xvY2spO1xuXHRcdFx0c3RhdGUuZmluaXNoZWQgPSAxO1xuXHRcdFx0c3RhdGUucnVubmluZyA9IDA7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4ge3RpY2ssIHN0b3AsIC4uLnN0YXRlfTtcbn07XG4iXX0=