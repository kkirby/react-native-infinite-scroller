function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Animated from 'react-native-reanimated';
const {
  stopClock,
  defined,
  clockRunning,
  startClock,
  decay,
  debug,
  round,
  spring,
  SpringUtils
} = Animated;
export const springHelper = (value, toValue, velocity, springConfig = {}) => {
  const clock = new Animated.Clock();
  const state = {
    finished: new Animated.Value(0),
    velocity: new Animated.Value(0),
    position: value,
    time: new Animated.Value(0),
    running: new Animated.Value(0)
  };

  const config = _objectSpread({}, SpringUtils.makeDefaultConfig(), {}, springConfig, {
    restDisplacementThreshold: 1,
    restSpeedThreshold: 1,
    toValue
  });

  const tick = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 0), [Animated.set(state.running, 1), Animated.set(state.finished, 0), Animated.set(state.time, 0), Animated.set(state.velocity, velocity), startClock(clock)]), spring(clock, state, config), Animated.cond(Animated.eq(state.finished, 1), [Animated.set(state.running, 0), stopClock(clock)]), value]);
  const stop = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 1), [stopClock(clock), Animated.set(state.finished, 1), Animated.set(state.running, 0)])]);
  return _objectSpread({
    tick,
    stop
  }, state);
};
export const decayHelper = (value, velocity, deceleration) => {
  const clock = new Animated.Clock();
  const state = {
    finished: new Animated.Value(0),
    velocity: new Animated.Value(0),
    position: value,
    time: new Animated.Value(0),
    running: new Animated.Value(0)
  };
  const tick = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 0), [Animated.set(state.running, 1), Animated.set(state.finished, 0), Animated.set(state.time, 0), Animated.set(state.velocity, velocity), startClock(clock)]), decay(clock, state, {
    deceleration
  }), Animated.cond(Animated.eq(state.finished, 1), [Animated.set(state.running, 0), stopClock(clock)]), value]);
  const stop = Animated.block([Animated.cond(Animated.eq(clockRunning(clock), 1), [stopClock(clock), Animated.set(state.finished, 1), Animated.set(state.running, 0)])]);
  return _objectSpread({
    tick,
    stop
  }, state);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BbmltYXRpb25Mb2dpYy9SZWFuaW1hdGVkSGVscGVycy5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZCIsInN0b3BDbG9jayIsImRlZmluZWQiLCJjbG9ja1J1bm5pbmciLCJzdGFydENsb2NrIiwiZGVjYXkiLCJkZWJ1ZyIsInJvdW5kIiwic3ByaW5nIiwiU3ByaW5nVXRpbHMiLCJzcHJpbmdIZWxwZXIiLCJ2YWx1ZSIsInRvVmFsdWUiLCJ2ZWxvY2l0eSIsInNwcmluZ0NvbmZpZyIsImNsb2NrIiwiQ2xvY2siLCJzdGF0ZSIsImZpbmlzaGVkIiwiVmFsdWUiLCJwb3NpdGlvbiIsInRpbWUiLCJydW5uaW5nIiwiY29uZmlnIiwibWFrZURlZmF1bHRDb25maWciLCJyZXN0RGlzcGxhY2VtZW50VGhyZXNob2xkIiwicmVzdFNwZWVkVGhyZXNob2xkIiwidGljayIsInN0b3AiLCJkZWNheUhlbHBlciIsImRlY2VsZXJhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBT0EsUUFBUCxNQUFxQix5QkFBckI7QUFFQSxNQUFNO0FBQ0xDLEVBQUFBLFNBREs7QUFFTEMsRUFBQUEsT0FGSztBQUdMQyxFQUFBQSxZQUhLO0FBSUxDLEVBQUFBLFVBSks7QUFLTEMsRUFBQUEsS0FMSztBQU1MQyxFQUFBQSxLQU5LO0FBT0xDLEVBQUFBLEtBUEs7QUFRTEMsRUFBQUEsTUFSSztBQVNMQyxFQUFBQTtBQVRLLElBVUZULFFBVko7QUFZQSxPQUFPLE1BQU1VLFlBQVksR0FBRyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUJDLFFBQWpCLEVBQTBCQyxZQUFZLEdBQUcsRUFBekMsS0FBZ0Q7QUFDM0UsUUFBTUMsS0FBSyxHQUFHLElBQUlmLFFBQVEsQ0FBQ2dCLEtBQWIsRUFBZDtBQUNBLFFBQU1DLEtBQUssR0FBRztBQUNiQyxJQUFBQSxRQUFRLEVBQUUsSUFBSWxCLFFBQVEsQ0FBQ21CLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FERztBQUViTixJQUFBQSxR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QUQsQ0FEUCxFQUNtQixDQURuQixJQUVSZCxTQUFTLENBQUNjLEtBQUQsQ0FGRCxlQUdSRSxLQUFLLENBQUNDLFFBSEUsRUFHUyxDQUhULGdCQUlSRCxLQUFLLENBQUNLLE9BSkUsRUFJUSxDQUpSLEtBQVY7QUFRQTtBQUFRSyxJQUFBQSxJQUFSO0FBQWNDLElBQUFBO0FBQWQsS0FBdUJYLEtBQXZCO0FBQ0EsQ0FyQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmUgZnJvbSAnQGtraXJiYXRza2kvanMtdG8tcmVhbmltYXRlZC5tYWNybyc7XG5pbXBvcnQgQW5pbWF0ZWQgZnJvbSAncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnO1xuXG5jb25zdCB7XG5cdHN0b3BDbG9jayxcblx0ZGVmaW5lZCxcblx0Y2xvY2tSdW5uaW5nLFxuXHRzdGFydENsb2NrLFxuXHRkZWNheSxcblx0ZGVidWcsXG5cdHJvdW5kLFxuXHRzcHJpbmcsXG5cdFNwcmluZ1V0aWxzLFxufSA9IEFuaW1hdGVkO1xuXG5leHBvcnQgY29uc3Qgc3ByaW5nSGVscGVyID0gKHZhbHVlLCB0b1ZhbHVlLCB2ZWxvY2l0eSxzcHJpbmdDb25maWcgPSB7fSkgPT4ge1xuXHRjb25zdCBjbG9jayA9IG5ldyBBbmltYXRlZC5DbG9jaygpO1xuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRmaW5pc2hlZDogbmV3IEFuaW1hdGVkLlZhbHVlKDApLFxuXHRcdHZlbG9jaXR5OiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdFx0cG9zaXRpb246IHZhbHVlLFxuXHRcdHRpbWU6IG5ldyBBbmltYXRlZC5WYWx1ZSgwKSxcblx0XHRydW5uaW5nOiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdH07XG5cblx0Y29uc3QgY29uZmlnID0ge1xuXHRcdC4uLlNwcmluZ1V0aWxzLm1ha2VEZWZhdWx0Q29uZmlnKCksXG5cdFx0Li4uc3ByaW5nQ29uZmlnLFxuXHRcdHJlc3REaXNwbGFjZW1lbnRUaHJlc2hvbGQ6IDEsXG5cdFx0cmVzdFNwZWVkVGhyZXNob2xkOiAxLFxuXHRcdHRvVmFsdWUsXG5cdH07XG5cblx0Y29uc3QgdGljayA9IHJlKCgpID0+IHtcblx0XHRpZiAoY2xvY2tSdW5uaW5nKGNsb2NrKSA9PT0gMCkge1xuXHRcdFx0c3RhdGUucnVubmluZyA9IDE7XG5cdFx0XHRzdGF0ZS5maW5pc2hlZCA9IDA7XG5cdFx0XHRzdGF0ZS50aW1lID0gMDtcblx0XHRcdHN0YXRlLnZlbG9jaXR5ID0gdmVsb2NpdHk7XG5cdFx0XHRzdGFydENsb2NrKGNsb2NrKTtcblx0XHR9XG5cdFx0c3ByaW5nKGNsb2NrLCBzdGF0ZSwgY29uZmlnKTtcblxuXHRcdGlmIChzdGF0ZS5maW5pc2hlZCA9PT0gMSkge1xuXHRcdFx0c3RhdGUucnVubmluZyA9IDA7XG5cdFx0XHRzdG9wQ2xvY2soY2xvY2spO1xuXHRcdH1cblx0XHR2YWx1ZTtcblx0fSk7XG5cblx0Y29uc3Qgc3RvcCA9IHJlKCgpID0+IHtcblx0XHRpZiAoY2xvY2tSdW5uaW5nKGNsb2NrKSA9PT0gMSkge1xuXHRcdFx0c3RvcENsb2NrKGNsb2NrKTtcblx0XHRcdHN0YXRlLmZpbmlzaGVkID0gMTtcblx0XHRcdHN0YXRlLnJ1bm5pbmcgPSAwO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHt0aWNrLCBzdG9wLCAuLi5zdGF0ZX07XG59O1xuXG5leHBvcnQgY29uc3QgZGVjYXlIZWxwZXIgPSAodmFsdWUsIHZlbG9jaXR5LCBkZWNlbGVyYXRpb24pID0+IHtcblx0Y29uc3QgY2xvY2sgPSBuZXcgQW5pbWF0ZWQuQ2xvY2soKTtcblx0Y29uc3Qgc3RhdGUgPSB7XG5cdFx0ZmluaXNoZWQ6IG5ldyBBbmltYXRlZC5WYWx1ZSgwKSxcblx0XHR2ZWxvY2l0eTogbmV3IEFuaW1hdGVkLlZhbHVlKDApLFxuXHRcdHBvc2l0aW9uOiB2YWx1ZSxcblx0XHR0aW1lOiBuZXcgQW5pbWF0ZWQuVmFsdWUoMCksXG5cdFx0cnVubmluZzogbmV3IEFuaW1hdGVkLlZhbHVlKDApLFxuXHR9O1xuXG5cdGNvbnN0IHRpY2sgPSByZSgoKSA9PiB7XG5cdFx0aWYgKGNsb2NrUnVubmluZyhjbG9jaykgPT09IDApIHtcblx0XHRcdHN0YXRlLnJ1bm5pbmcgPSAxO1xuXHRcdFx0c3RhdGUuZmluaXNoZWQgPSAwO1xuXHRcdFx0c3RhdGUudGltZSA9IDA7XG5cdFx0XHRzdGF0ZS52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuXHRcdFx0c3RhcnRDbG9jayhjbG9jayk7XG5cdFx0fVxuXHRcdGRlY2F5KGNsb2NrLCBzdGF0ZSwge1xuXHRcdFx0ZGVjZWxlcmF0aW9uLFxuXHRcdH0pO1xuXHRcdGlmIChzdGF0ZS5maW5pc2hlZCA9PT0gMSkge1xuXHRcdFx0c3RhdGUucnVubmluZyA9IDA7XG5cdFx0XHRzdG9wQ2xvY2soY2xvY2spO1xuXHRcdH1cblx0XHR2YWx1ZTtcblx0fSk7XG5cblx0Y29uc3Qgc3RvcCA9IHJlKCgpID0+IHtcblx0XHRpZiAoY2xvY2tSdW5uaW5nKGNsb2NrKSA9PT0gMSkge1xuXHRcdFx0c3RvcENsb2NrKGNsb2NrKTtcblx0XHRcdHN0YXRlLmZpbmlzaGVkID0gMTtcblx0XHRcdHN0YXRlLnJ1bm5pbmcgPSAwO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHt0aWNrLCBzdG9wLCAuLi5zdGF0ZX07XG59O1xuIl19