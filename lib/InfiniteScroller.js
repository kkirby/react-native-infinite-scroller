function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import Animated from 'react-native-reanimated';
import { PanGestureHandler } from 'react-native-gesture-handler';
import InfiniteElement from './InfiniteElement';
import InfiniteCalculator from './InfiniteCalculator';
import InfiniteItem from './InfiniteItem';
import AnimationLogic from './AnimationLogic';
export default class InfiniteScroller extends Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "infiniteCalculator", void 0);

    _defineProperty(this, "infiniteElements", []);

    _defineProperty(this, "animationLogic", void 0);

    _defineProperty(this, "currentElement", void 0);

    _defineProperty(this, "panHandlerRef", void 0);

    _defineProperty(this, "onScrollEnd", ({
      x
    }) => {
      this.infiniteCalculator.x = x;

      if (this.props.onScrollEnd) {
        x *= -1;
        this.currentElement = this.infiniteElements.find(element => {
          return element.left === x;
        });

        if (this.currentElement != null) {
          this.props.onScrollEnd(this.currentElement.phase, this.currentElement.data, this);
        } else {
          console.warn('InfiniteScroller is unable to determine the current item after the scroll ended.');
        }
      }
    });

    _defineProperty(this, "onItemLayout", ({
      nativeEvent: {
        layout: {
          width,
          height
        }
      }
    }) => {
      const {
        itemLayout
      } = this.state;

      if (itemLayout.width !== width || itemLayout.height !== height) {
        this.setState({
          itemLayout: {
            width,
            height
          }
        });
      }
    });

    _defineProperty(this, "onWrapperLayout", ({
      nativeEvent: {
        layout: {
          width,
          height
        }
      }
    }) => {
      const {
        wrapperLayout
      } = this.state;

      if (wrapperLayout.width !== width || wrapperLayout.height !== height) {
        this.setState({
          wrapperLayout: {
            width,
            height
          }
        });
      }
    });

    this.state = {
      itemLayout: props.itemDimensions || {
        width: 0,
        height: 0
      },
      wrapperLayout: props.wrapperDimensions || {
        width: 0,
        height: 0
      },
      ready: false
    };
    this.infiniteElements = [];

    for (let i = 0; i < (props.infiniteElementCount || 100); i++) {
      this.infiniteElements.push(new InfiniteElement());
    }

    this.infiniteCalculator = new InfiniteCalculator(_objectSpread({}, props, {
      infiniteLimit: Math.floor(2147483645 / 1000),
      infiniteElements: this.infiniteElements,
      cacheSize: this.infiniteElements.length * 2
    }));
    const startingPosition = props.startingPosition != null ? -1 * props.startingPosition * this.state.itemLayout.width : 0;
    this.animationLogic = AnimationLogic({
      springConfig: props.springConfig || {},
      decayConfig: props.decayConfig || {},
      centerScroll: props.centerInWrapper != null ? props.centerInWrapper : false,
      wrapperWidth: this.state.wrapperLayout.width,
      itemWidth: this.state.itemLayout.width,
      hasMaxScroll: this.state.itemLayout.width !== 0 && props.totalItemCount != null,
      maxScroll: this.state.itemLayout.width !== 0 && props.totalItemCount != null ? -1 * this.state.itemLayout.width * (props.totalItemCount - 1) : 0,
      startingPosition
    });
    this.animationLogic.on('change', value => {
      this.infiniteCalculator.x = value;
    });
    this.animationLogic.on('scrollEnd', this.onScrollEnd);
    this.panHandlerRef = React.createRef();
    this.onUpdate(false);

    if (startingPosition !== 0) {
      this.onScrollEnd({
        x: startingPosition
      });
    }
  }

  onUpdate(isMounted = true) {
    this.animationLogic.updateCenterScroll(this.props.centerInWrapper != null ? this.props.centerInWrapper : false);

    if (this.state.itemLayout.width !== 0) {
      this.infiniteCalculator.infiniteElementWidth = this.state.itemLayout.width;
      this.animationLogic.updateItemWidth(this.state.itemLayout.width);
    }

    if (this.state.wrapperLayout.width !== 0) {
      this.infiniteCalculator.wrapperWidth = this.state.wrapperLayout.width;
      this.animationLogic.updateWrapperWidth(this.state.wrapperLayout.width);
    }

    if (this.state.itemLayout.width && this.props.totalItemCount != null) {
      this.animationLogic.updateMaxScroll(-1 * this.state.itemLayout.width * (this.props.totalItemCount - 1));
    }

    this.infiniteCalculator.reorderInfinite();
    this.onReady(isMounted);
  }

  onReady(isMounted = true) {
    if (this.state.ready === false) {
      if (this.state.itemLayout.width !== 0 && this.state.wrapperLayout.width !== 0) {
        if (isMounted) {
          this.setState({
            ready: true
          });
        } else {
          this.state = _objectSpread({}, this.state, {
            ready: true
          });
        }
      }
    }
  }

  componentDidUpdate(prevProps, prevState) {
    let didChange = false;
    didChange = didChange || prevState.itemLayout.width !== this.state.itemLayout.width;
    didChange = didChange || prevState.wrapperLayout.width !== this.state.wrapperLayout.width;
    didChange = didChange || prevState.ready !== this.state.ready;
    didChange = didChange || prevProps.centerInWrapper !== this.props.centerInWrapper;
    didChange = didChange || prevProps.totalItemCount !== this.props.totalItemCount;

    if (didChange) {
      this.onUpdate();
    }

    if (prevProps.dataset !== this.props.dataset) {
      console.log('refresh dataset');
      this.datasetNeedsRefresh();
    }
  }

  datasetNeedsRefresh() {
    this.infiniteCalculator.updateDataset(this.props.dataset);
  }

  componentWillUnmount() {
    this.infiniteCalculator.dispose();
  }

  calculateCurrentIndex(moveXValue) {
    const itemWidth = this.state.itemLayout.width;
    const wrapperWidth = this.state.wrapperLayout.width;
    const centerInWrapper = this.props.centerInWrapper != null ? this.props.centerInWrapper : false;
    const center = centerInWrapper ? wrapperWidth / 2 - itemWidth / 2 : 0;
    /**
     * The value will be slighly off because our snap end threshhold is a
     * bit high to ensure events are triggered in a timley manner.
     **/

    return Math.round((center - moveXValue) / itemWidth);
  }

  getCurrentIndex() {
    return this.calculateCurrentIndex(this.infiniteCalculator.x);
  }

  async goNext(withAnimation = true) {
    const index = this.getCurrentIndex();
    return this.scrollToIndex(index + 1, withAnimation);
  }

  async goBack(withAnimation = true) {
    const index = this.getCurrentIndex();
    return this.scrollToIndex(index - 1, withAnimation);
  }

  scrollToIndex(itemOffset, withAnimation = true) {
    this.animationLogic.scrollTo(-1 * itemOffset * this.state.itemLayout.width, withAnimation);
  }

  scrollToElement(element, withAnimation) {
    return this.scrollToIndex(element.phase, withAnimation);
  }

  findNearestInfiniteElement(comparator) {
    const x = -1 * this.infiniteCalculator.x;
    let elements = [...this.infiniteElements].sort((a, b) => {
      const aDelta = Math.abs(x - a.left);
      const bDelta = Math.abs(x - b.left);
      return aDelta - bDelta;
    });
    return elements.find(item => comparator(item));
  }

  scrollToItem(comparator, withAnimation) {
    const element = this.findNearestInfiniteElement(elm => elm.data != null ? comparator(elm.data) : false);

    if (element) {
      return this.scrollToElement(element, withAnimation);
    }
  }

  render() {
    const style = {
      height: this.state.itemLayout.height,
      opacity: this.state.ready ? 1 : 0
    };
    return <PanGestureHandler ref={this.panHandlerRef} simultaneousHandlers={this.props.simultaneousHandlers} waitFor={this.props.waitFor} onGestureEvent={this.animationLogic.gestureHandler} onHandlerStateChange={this.animationLogic.gestureHandler}>
				<Animated.View style={[this.props.style, style]} onLayout={this.onWrapperLayout}>
					<Animated.View style={{
          transform: [{
            translateX: this.animationLogic.x
          }, {
            perspective: 1000
          } // without this line this Animation will not render on Android while working fine on iOS
          ]
        }}>
						{this.infiniteElements.map((item, i) => {
            return <InfiniteItem elementIndex={i} renderItem={this.props.renderItem} item={item} key={i} onLayout={i === 0 ? this.onItemLayout : null} />;
          })}
					</Animated.View>
				</Animated.View>
			</PanGestureHandler>;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,